name: Build and Package TodoList

on:
  push:
    tags:
      - 'v*'

jobs:
  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '22'

      - name: Download JavaFX SDK & JMODs
        run: |
          curl -L https://download2.gluonhq.com/openjfx/22.0.1/openjfx-22.0.1_osx-x64_bin-sdk.zip -o javafx.zip
          unzip javafx.zip -d javafx
          curl -L https://download2.gluonhq.com/openjfx/22.0.1/openjfx-22.0.1_osx-x64_bin-jmods.zip -o jmods.zip
          unzip jmods.zip -d javafx-jmods

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build project with Maven
        run: mvn clean package

      - name: Create output directory
        run: mkdir -p dist/mac

      - name: Package macOS app with jpackage
        run: |
          jlink \
            --module-path $JAVA_HOME/jmods:javafx-jmods/javafx-jmods-22.0.1 \
            --add-modules java.base,javafx.controls,javafx.fxml \
            --output runtime-mac \
            --strip-debug --compress=2 --no-header-files --no-man-pages

          jpackage \
            --type app-image \
            --input target \
            --dest dist/mac \
            --name TodoList \
            --main-jar todolist-1.0-SNAPSHOT-jar-with-dependencies.jar \
            --main-class com.todo.javiergrande.Main \
            --runtime-image runtime-mac \
            --icon src/main/resources/icon.icns

      - name: Upload macOS build
        uses: actions/upload-artifact@v4
        with:
          name: TodoList-mac
          path: dist/mac/TodoList.app

  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '22'

      - name: Download JavaFX SDK & JMODs
        run: |
          Invoke-WebRequest -Uri https://download2.gluonhq.com/openjfx/22.0.1/openjfx-22.0.1_windows-x64_bin-sdk.zip -OutFile javafx.zip
          Expand-Archive javafx.zip -DestinationPath javafx
          Invoke-WebRequest -Uri https://download2.gluonhq.com/openjfx/22.0.1/openjfx-22.0.1_windows-x64_bin-jmods.zip -OutFile jmods.zip
          Expand-Archive jmods.zip -DestinationPath javafx-jmods

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build project with Maven
        run: mvn clean package

      - name: Create output directory
        run: mkdir -p dist/win

      - name: Package Windows app with jpackage
        run: |
          jlink \
            --module-path "$Env:JAVA_HOME\jmods;javafx-jmods\javafx-jmods-22.0.1" \
            --add-modules java.base,javafx.controls,javafx.fxml \
            --output runtime-win \
            --strip-debug --compress=2 --no-header-files --no-man-pages

          jpackage \
            --type exe \
            --input target \
            --dest dist/win \
            --name TodoList \
            --main-jar todolist-1.0-SNAPSHOT-jar-with-dependencies.jar \
            --main-class com.todo.javiergrande.Main \
            --runtime-image runtime-win \
            --icon src/main/resources/icon.ico

      - name: Upload Windows build
        uses: actions/upload-artifact@v4
        with:
          name: TodoList-windows
          path: dist/win/TodoList.exe

  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '22'

      - name: Download JavaFX SDK & JMODs
        run: |
          curl -L https://download2.gluonhq.com/openjfx/22.0.1/openjfx-22.0.1_linux-x64_bin-sdk.zip -o javafx.zip
          unzip javafx.zip -d javafx
          curl -L https://download2.gluonhq.com/openjfx/22.0.1/openjfx-22.0.1_linux-x64_bin-jmods.zip -o jmods.zip
          unzip jmods.zip -d javafx-jmods

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build project with Maven
        run: mvn clean package

      - name: Create output directory
        run: mkdir -p dist/linux

      - name: Package Linux app with jpackage
        run: |
          jlink \
            --module-path $JAVA_HOME/jmods:javafx-jmods/javafx-jmods-22.0.1 \
            --add-modules java.base,javafx.controls,javafx.fxml \
            --output runtime-linux \
            --strip-debug --compress=2 --no-header-files --no-man-pages

          jpackage \
            --type app-image \
            --input target \
            --dest dist/linux \
            --name TodoList \
            --main-jar todolist-1.0-SNAPSHOT-jar-with-dependencies.jar \
            --main-class com.todo.javiergrande.Main \
            --runtime-image runtime-linux \
            --icon src/main/resources/icon.png

      - name: Upload Linux build
        uses: actions/upload-artifact@v4
        with:
          name: TodoList-linux
          path: dist/linux/TodoList