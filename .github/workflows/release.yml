name: Build and Package TodoList

on:
  push:
    tags:
      - 'v*'

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Download JavaFX SDK and JMODs
        run: |
          curl -L https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_osx-x64_bin-sdk.zip -o javafx.zip
          unzip javafx.zip -d javafx
          curl -L https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_osx-x64_bin-jmods.zip -o jmods.zip
          unzip jmods.zip -d javafx-jmods

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build project
        run: mvn clean package

      - name: Build macOS .app
        run: |
          rm -rf dist/mac/TodoList.app
          jlink \
            --module-path $JAVA_HOME/jmods:javafx-jmods/javafx-jmods-21.0.1 \
            --add-modules java.base,javafx.controls,javafx.fxml \
            --output runtime-mac \
            --strip-debug --compress=2 --no-header-files --no-man-pages
          jpackage \
            --type app-image \
            --input target \
            --dest dist/mac \
            --name TodoList \
            --main-jar todolist-1.0-SNAPSHOT-jar-with-dependencies.jar \
            --main-class com.todo.javiergrande.Main \
            --runtime-image runtime-mac \
            --icon src/main/resources/icon.icns

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: mac
          path: dist/mac/TodoList.app

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Download JavaFX SDK and JMODs
        run: |
          Invoke-WebRequest -Uri https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_windows-x64_bin-sdk.zip -OutFile javafx.zip
          Expand-Archive javafx.zip -DestinationPath javafx
          Invoke-WebRequest -Uri https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_windows-x64_bin-jmods.zip -OutFile jmods.zip
          Expand-Archive jmods.zip -DestinationPath javafx-jmods

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build project
        run: mvn clean package

      - name: Build Windows .exe
        run: |
          Remove-Item -Recurse -Force dist\win\TodoList.exe -ErrorAction SilentlyContinue
          jlink `
            --module-path "$Env:JAVA_HOME\jmods;javafx-jmods\javafx-jmods-21.0.1" `
            --add-modules java.base,javafx.controls,javafx.fxml `
            --output runtime-win `
            --strip-debug --compress=2 --no-header-files --no-man-pages
          jpackage `
            --type exe `
            --input target `
            --dest dist/win `
            --name TodoList `
            --main-jar todolist-1.0-SNAPSHOT-jar-with-dependencies.jar `
            --main-class com.todo.javiergrande.Main `
            --runtime-image runtime-win `
            --icon src/main/resources/icon.ico

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: win
          path: dist/win/TodoList.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Download JavaFX SDK and JMODs
        run: |
          curl -L https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_linux-x64_bin-sdk.zip -o javafx.zip
          unzip javafx.zip -d javafx
          curl -L https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_linux-x64_bin-jmods.zip -o jmods.zip
          unzip jmods.zip -d javafx-jmods

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build project
        run: mvn clean package

      - name: Build Linux .deb
        run: |
          rm -rf dist/linux
          jlink \
            --module-path $JAVA_HOME/jmods:javafx-jmods/javafx-jmods-21.0.1 \
            --add-modules java.base,javafx.controls,javafx.fxml \
            --output runtime-linux \
            --strip-debug --compress=2 --no-header-files --no-man-pages
          jpackage \
            --type deb \
            --input target \
            --dest dist/linux \
            --name TodoList \
            --main-jar todolist-1.0-SNAPSHOT-jar-with-dependencies.jar \
            --main-class com.todo.javiergrande.Main \
            --runtime-image runtime-linux \
            --icon src/main/resources/icon.png

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: dist/linux/TodoList*.deb

  release:
    runs-on: ubuntu-latest
    needs: [build-macos, build-windows, build-linux]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release with binaries
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            artifacts/mac/TodoList.app/**
            artifacts/win/TodoList.exe
            artifacts/linux/TodoList*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}