name: Build and Package TodoList

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Package for all platforms
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set platform-specific variables
        id: vars
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "FX_URL=https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_linux-x64_bin" >> $GITHUB_ENV
            echo "EXT=png" >> $GITHUB_ENV
            echo "JPACKAGE_TYPE=app-image" >> $GITHUB_ENV
            echo "OUT=TodoList" >> $GITHUB_ENV
            echo "RUNTIME=runtime-linux" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "FX_URL=https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_osx-x64_bin" >> $GITHUB_ENV
            echo "EXT=icns" >> $GITHUB_ENV
            echo "JPACKAGE_TYPE=app-image" >> $GITHUB_ENV
            echo "OUT=TodoList.app" >> $GITHUB_ENV
            echo "RUNTIME=runtime-mac" >> $GITHUB_ENV
          else
            echo "FX_URL=https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_windows-x64_bin" >> $GITHUB_ENV
            echo "EXT=ico" >> $GITHUB_ENV
            echo "JPACKAGE_TYPE=exe" >> $GITHUB_ENV
            echo "OUT=TodoList.exe" >> $GITHUB_ENV
            echo "RUNTIME=runtime-win" >> $GITHUB_ENV
          fi

      - name: Download JavaFX SDK and JMODs
        run: |
          curl -L $FX_URL-sdk.zip -o javafx.zip
          unzip javafx.zip -d javafx
          curl -L $FX_URL-jmods.zip -o jmods.zip
          unzip jmods.zip -d javafx-jmods

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build project
        run: mvn clean package

      - name: Remove existing app if exists
        run: rm -rf dist/${{ matrix.os == 'windows-latest' && 'win' || matrix.os == 'macos-latest' && 'mac' || 'linux' }}/$OUT || true

      - name: Create runtime with jlink
        run: |
          jlink \
            --module-path $JAVA_HOME/jmods:javafx-jmods/javafx-jmods-21.0.1 \
            --add-modules java.base,javafx.controls,javafx.fxml \
            --output $RUNTIME \
            --strip-debug --compress=2 --no-header-files --no-man-pages

      - name: Package app with jpackage
        run: |
          mkdir -p dist/${{ matrix.os == 'windows-latest' && 'win' || matrix.os == 'macos-latest' && 'mac' || 'linux' }}
          jpackage \
            --type $JPACKAGE_TYPE \
            --input target \
            --dest dist/${{ matrix.os == 'windows-latest' && 'win' || matrix.os == 'macos-latest' && 'mac' || 'linux' }} \
            --name TodoList \
            --main-jar todolist-1.0-SNAPSHOT-jar-with-dependencies.jar \
            --main-class com.todo.javiergrande.Main \
            --runtime-image $RUNTIME \
            --icon src/main/resources/icon.$EXT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: TodoList-${{ matrix.os }}
          path: dist/${{ matrix.os == 'windows-latest' && 'win/TodoList.exe' || matrix.os == 'macos-latest' && 'mac/TodoList.app' || 'linux/TodoList' }}

      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/TodoList*